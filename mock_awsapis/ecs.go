// Code generated by MockGen. DO NOT EDIT.
// Source: awsapis/ecs.go

// Package mock_awsapis is a generated GoMock package.
package mock_awsapis

import (
	context "context"
	reflect "reflect"

	ecs "github.com/aws/aws-sdk-go-v2/service/ecs"
	awsapis "github.com/mcastellin/aws-fail-az/awsapis"
	gomock "go.uber.org/mock/gomock"
)

// MockEcsApi is a mock of EcsApi interface.
type MockEcsApi struct {
	ctrl     *gomock.Controller
	recorder *MockEcsApiMockRecorder
}

// MockEcsApiMockRecorder is the mock recorder for MockEcsApi.
type MockEcsApiMockRecorder struct {
	mock *MockEcsApi
}

// NewMockEcsApi creates a new mock instance.
func NewMockEcsApi(ctrl *gomock.Controller) *MockEcsApi {
	mock := &MockEcsApi{ctrl: ctrl}
	mock.recorder = &MockEcsApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEcsApi) EXPECT() *MockEcsApiMockRecorder {
	return m.recorder
}

// DescribeServices mocks base method.
func (m *MockEcsApi) DescribeServices(ctx context.Context, params *ecs.DescribeServicesInput, optFns ...func(*ecs.Options)) (*ecs.DescribeServicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeServices", varargs...)
	ret0, _ := ret[0].(*ecs.DescribeServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServices indicates an expected call of DescribeServices.
func (mr *MockEcsApiMockRecorder) DescribeServices(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServices", reflect.TypeOf((*MockEcsApi)(nil).DescribeServices), varargs...)
}

// DescribeTasks mocks base method.
func (m *MockEcsApi) DescribeTasks(ctx context.Context, params *ecs.DescribeTasksInput, optFns ...func(*ecs.Options)) (*ecs.DescribeTasksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTasks", varargs...)
	ret0, _ := ret[0].(*ecs.DescribeTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTasks indicates an expected call of DescribeTasks.
func (mr *MockEcsApiMockRecorder) DescribeTasks(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTasks", reflect.TypeOf((*MockEcsApi)(nil).DescribeTasks), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockEcsApi) ListTagsForResource(ctx context.Context, params *ecs.ListTagsForResourceInput, optFns ...func(*ecs.Options)) (*ecs.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*ecs.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockEcsApiMockRecorder) ListTagsForResource(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockEcsApi)(nil).ListTagsForResource), varargs...)
}

// NewListClustersPaginator mocks base method.
func (m *MockEcsApi) NewListClustersPaginator(params *ecs.ListClustersInput) awsapis.ListClustersPager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListClustersPaginator", params)
	ret0, _ := ret[0].(awsapis.ListClustersPager)
	return ret0
}

// NewListClustersPaginator indicates an expected call of NewListClustersPaginator.
func (mr *MockEcsApiMockRecorder) NewListClustersPaginator(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListClustersPaginator", reflect.TypeOf((*MockEcsApi)(nil).NewListClustersPaginator), params)
}

// NewListServicesPaginator mocks base method.
func (m *MockEcsApi) NewListServicesPaginator(params *ecs.ListServicesInput) awsapis.ListServicesPager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListServicesPaginator", params)
	ret0, _ := ret[0].(awsapis.ListServicesPager)
	return ret0
}

// NewListServicesPaginator indicates an expected call of NewListServicesPaginator.
func (mr *MockEcsApiMockRecorder) NewListServicesPaginator(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListServicesPaginator", reflect.TypeOf((*MockEcsApi)(nil).NewListServicesPaginator), params)
}

// NewListTasksPaginator mocks base method.
func (m *MockEcsApi) NewListTasksPaginator(params *ecs.ListTasksInput) awsapis.ListTasksPager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListTasksPaginator", params)
	ret0, _ := ret[0].(awsapis.ListTasksPager)
	return ret0
}

// NewListTasksPaginator indicates an expected call of NewListTasksPaginator.
func (mr *MockEcsApiMockRecorder) NewListTasksPaginator(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListTasksPaginator", reflect.TypeOf((*MockEcsApi)(nil).NewListTasksPaginator), params)
}

// StopTask mocks base method.
func (m *MockEcsApi) StopTask(ctx context.Context, params *ecs.StopTaskInput, optFns ...func(*ecs.Options)) (*ecs.StopTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopTask", varargs...)
	ret0, _ := ret[0].(*ecs.StopTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopTask indicates an expected call of StopTask.
func (mr *MockEcsApiMockRecorder) StopTask(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTask", reflect.TypeOf((*MockEcsApi)(nil).StopTask), varargs...)
}

// UpdateService mocks base method.
func (m *MockEcsApi) UpdateService(ctx context.Context, params *ecs.UpdateServiceInput, optFns ...func(*ecs.Options)) (*ecs.UpdateServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateService", varargs...)
	ret0, _ := ret[0].(*ecs.UpdateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockEcsApiMockRecorder) UpdateService(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockEcsApi)(nil).UpdateService), varargs...)
}

// MockEcsTagsLister is a mock of EcsTagsLister interface.
type MockEcsTagsLister struct {
	ctrl     *gomock.Controller
	recorder *MockEcsTagsListerMockRecorder
}

// MockEcsTagsListerMockRecorder is the mock recorder for MockEcsTagsLister.
type MockEcsTagsListerMockRecorder struct {
	mock *MockEcsTagsLister
}

// NewMockEcsTagsLister creates a new mock instance.
func NewMockEcsTagsLister(ctrl *gomock.Controller) *MockEcsTagsLister {
	mock := &MockEcsTagsLister{ctrl: ctrl}
	mock.recorder = &MockEcsTagsListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEcsTagsLister) EXPECT() *MockEcsTagsListerMockRecorder {
	return m.recorder
}

// ListTagsForResource mocks base method.
func (m *MockEcsTagsLister) ListTagsForResource(ctx context.Context, params *ecs.ListTagsForResourceInput, optFns ...func(*ecs.Options)) (*ecs.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*ecs.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockEcsTagsListerMockRecorder) ListTagsForResource(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockEcsTagsLister)(nil).ListTagsForResource), varargs...)
}

// MockEcsServiceDescriptor is a mock of EcsServiceDescriptor interface.
type MockEcsServiceDescriptor struct {
	ctrl     *gomock.Controller
	recorder *MockEcsServiceDescriptorMockRecorder
}

// MockEcsServiceDescriptorMockRecorder is the mock recorder for MockEcsServiceDescriptor.
type MockEcsServiceDescriptorMockRecorder struct {
	mock *MockEcsServiceDescriptor
}

// NewMockEcsServiceDescriptor creates a new mock instance.
func NewMockEcsServiceDescriptor(ctrl *gomock.Controller) *MockEcsServiceDescriptor {
	mock := &MockEcsServiceDescriptor{ctrl: ctrl}
	mock.recorder = &MockEcsServiceDescriptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEcsServiceDescriptor) EXPECT() *MockEcsServiceDescriptorMockRecorder {
	return m.recorder
}

// DescribeServices mocks base method.
func (m *MockEcsServiceDescriptor) DescribeServices(ctx context.Context, params *ecs.DescribeServicesInput, optFns ...func(*ecs.Options)) (*ecs.DescribeServicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeServices", varargs...)
	ret0, _ := ret[0].(*ecs.DescribeServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServices indicates an expected call of DescribeServices.
func (mr *MockEcsServiceDescriptorMockRecorder) DescribeServices(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServices", reflect.TypeOf((*MockEcsServiceDescriptor)(nil).DescribeServices), varargs...)
}

// MockEcsServiceUpdater is a mock of EcsServiceUpdater interface.
type MockEcsServiceUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockEcsServiceUpdaterMockRecorder
}

// MockEcsServiceUpdaterMockRecorder is the mock recorder for MockEcsServiceUpdater.
type MockEcsServiceUpdaterMockRecorder struct {
	mock *MockEcsServiceUpdater
}

// NewMockEcsServiceUpdater creates a new mock instance.
func NewMockEcsServiceUpdater(ctrl *gomock.Controller) *MockEcsServiceUpdater {
	mock := &MockEcsServiceUpdater{ctrl: ctrl}
	mock.recorder = &MockEcsServiceUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEcsServiceUpdater) EXPECT() *MockEcsServiceUpdaterMockRecorder {
	return m.recorder
}

// UpdateService mocks base method.
func (m *MockEcsServiceUpdater) UpdateService(ctx context.Context, params *ecs.UpdateServiceInput, optFns ...func(*ecs.Options)) (*ecs.UpdateServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateService", varargs...)
	ret0, _ := ret[0].(*ecs.UpdateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockEcsServiceUpdaterMockRecorder) UpdateService(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockEcsServiceUpdater)(nil).UpdateService), varargs...)
}

// MockEcsTaskStopper is a mock of EcsTaskStopper interface.
type MockEcsTaskStopper struct {
	ctrl     *gomock.Controller
	recorder *MockEcsTaskStopperMockRecorder
}

// MockEcsTaskStopperMockRecorder is the mock recorder for MockEcsTaskStopper.
type MockEcsTaskStopperMockRecorder struct {
	mock *MockEcsTaskStopper
}

// NewMockEcsTaskStopper creates a new mock instance.
func NewMockEcsTaskStopper(ctrl *gomock.Controller) *MockEcsTaskStopper {
	mock := &MockEcsTaskStopper{ctrl: ctrl}
	mock.recorder = &MockEcsTaskStopperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEcsTaskStopper) EXPECT() *MockEcsTaskStopperMockRecorder {
	return m.recorder
}

// StopTask mocks base method.
func (m *MockEcsTaskStopper) StopTask(ctx context.Context, params *ecs.StopTaskInput, optFns ...func(*ecs.Options)) (*ecs.StopTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopTask", varargs...)
	ret0, _ := ret[0].(*ecs.StopTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopTask indicates an expected call of StopTask.
func (mr *MockEcsTaskStopperMockRecorder) StopTask(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTask", reflect.TypeOf((*MockEcsTaskStopper)(nil).StopTask), varargs...)
}

// MockEcsTaskDescriptor is a mock of EcsTaskDescriptor interface.
type MockEcsTaskDescriptor struct {
	ctrl     *gomock.Controller
	recorder *MockEcsTaskDescriptorMockRecorder
}

// MockEcsTaskDescriptorMockRecorder is the mock recorder for MockEcsTaskDescriptor.
type MockEcsTaskDescriptorMockRecorder struct {
	mock *MockEcsTaskDescriptor
}

// NewMockEcsTaskDescriptor creates a new mock instance.
func NewMockEcsTaskDescriptor(ctrl *gomock.Controller) *MockEcsTaskDescriptor {
	mock := &MockEcsTaskDescriptor{ctrl: ctrl}
	mock.recorder = &MockEcsTaskDescriptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEcsTaskDescriptor) EXPECT() *MockEcsTaskDescriptorMockRecorder {
	return m.recorder
}

// DescribeTasks mocks base method.
func (m *MockEcsTaskDescriptor) DescribeTasks(ctx context.Context, params *ecs.DescribeTasksInput, optFns ...func(*ecs.Options)) (*ecs.DescribeTasksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTasks", varargs...)
	ret0, _ := ret[0].(*ecs.DescribeTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTasks indicates an expected call of DescribeTasks.
func (mr *MockEcsTaskDescriptorMockRecorder) DescribeTasks(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTasks", reflect.TypeOf((*MockEcsTaskDescriptor)(nil).DescribeTasks), varargs...)
}

// MockListClustersPaginator is a mock of ListClustersPaginator interface.
type MockListClustersPaginator struct {
	ctrl     *gomock.Controller
	recorder *MockListClustersPaginatorMockRecorder
}

// MockListClustersPaginatorMockRecorder is the mock recorder for MockListClustersPaginator.
type MockListClustersPaginatorMockRecorder struct {
	mock *MockListClustersPaginator
}

// NewMockListClustersPaginator creates a new mock instance.
func NewMockListClustersPaginator(ctrl *gomock.Controller) *MockListClustersPaginator {
	mock := &MockListClustersPaginator{ctrl: ctrl}
	mock.recorder = &MockListClustersPaginatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListClustersPaginator) EXPECT() *MockListClustersPaginatorMockRecorder {
	return m.recorder
}

// NewListClustersPaginator mocks base method.
func (m *MockListClustersPaginator) NewListClustersPaginator(params *ecs.ListClustersInput) awsapis.ListClustersPager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListClustersPaginator", params)
	ret0, _ := ret[0].(awsapis.ListClustersPager)
	return ret0
}

// NewListClustersPaginator indicates an expected call of NewListClustersPaginator.
func (mr *MockListClustersPaginatorMockRecorder) NewListClustersPaginator(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListClustersPaginator", reflect.TypeOf((*MockListClustersPaginator)(nil).NewListClustersPaginator), params)
}

// MockListClustersPager is a mock of ListClustersPager interface.
type MockListClustersPager struct {
	ctrl     *gomock.Controller
	recorder *MockListClustersPagerMockRecorder
}

// MockListClustersPagerMockRecorder is the mock recorder for MockListClustersPager.
type MockListClustersPagerMockRecorder struct {
	mock *MockListClustersPager
}

// NewMockListClustersPager creates a new mock instance.
func NewMockListClustersPager(ctrl *gomock.Controller) *MockListClustersPager {
	mock := &MockListClustersPager{ctrl: ctrl}
	mock.recorder = &MockListClustersPagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListClustersPager) EXPECT() *MockListClustersPagerMockRecorder {
	return m.recorder
}

// HasMorePages mocks base method.
func (m *MockListClustersPager) HasMorePages() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMorePages")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasMorePages indicates an expected call of HasMorePages.
func (mr *MockListClustersPagerMockRecorder) HasMorePages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMorePages", reflect.TypeOf((*MockListClustersPager)(nil).HasMorePages))
}

// NextPage mocks base method.
func (m *MockListClustersPager) NextPage(arg0 context.Context, arg1 ...func(*ecs.Options)) (*ecs.ListClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NextPage", varargs...)
	ret0, _ := ret[0].(*ecs.ListClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextPage indicates an expected call of NextPage.
func (mr *MockListClustersPagerMockRecorder) NextPage(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPage", reflect.TypeOf((*MockListClustersPager)(nil).NextPage), varargs...)
}

// MockListServicesPaginator is a mock of ListServicesPaginator interface.
type MockListServicesPaginator struct {
	ctrl     *gomock.Controller
	recorder *MockListServicesPaginatorMockRecorder
}

// MockListServicesPaginatorMockRecorder is the mock recorder for MockListServicesPaginator.
type MockListServicesPaginatorMockRecorder struct {
	mock *MockListServicesPaginator
}

// NewMockListServicesPaginator creates a new mock instance.
func NewMockListServicesPaginator(ctrl *gomock.Controller) *MockListServicesPaginator {
	mock := &MockListServicesPaginator{ctrl: ctrl}
	mock.recorder = &MockListServicesPaginatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListServicesPaginator) EXPECT() *MockListServicesPaginatorMockRecorder {
	return m.recorder
}

// NewListServicesPaginator mocks base method.
func (m *MockListServicesPaginator) NewListServicesPaginator(params *ecs.ListServicesInput) awsapis.ListServicesPager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListServicesPaginator", params)
	ret0, _ := ret[0].(awsapis.ListServicesPager)
	return ret0
}

// NewListServicesPaginator indicates an expected call of NewListServicesPaginator.
func (mr *MockListServicesPaginatorMockRecorder) NewListServicesPaginator(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListServicesPaginator", reflect.TypeOf((*MockListServicesPaginator)(nil).NewListServicesPaginator), params)
}

// MockListServicesPager is a mock of ListServicesPager interface.
type MockListServicesPager struct {
	ctrl     *gomock.Controller
	recorder *MockListServicesPagerMockRecorder
}

// MockListServicesPagerMockRecorder is the mock recorder for MockListServicesPager.
type MockListServicesPagerMockRecorder struct {
	mock *MockListServicesPager
}

// NewMockListServicesPager creates a new mock instance.
func NewMockListServicesPager(ctrl *gomock.Controller) *MockListServicesPager {
	mock := &MockListServicesPager{ctrl: ctrl}
	mock.recorder = &MockListServicesPagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListServicesPager) EXPECT() *MockListServicesPagerMockRecorder {
	return m.recorder
}

// HasMorePages mocks base method.
func (m *MockListServicesPager) HasMorePages() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMorePages")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasMorePages indicates an expected call of HasMorePages.
func (mr *MockListServicesPagerMockRecorder) HasMorePages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMorePages", reflect.TypeOf((*MockListServicesPager)(nil).HasMorePages))
}

// NextPage mocks base method.
func (m *MockListServicesPager) NextPage(arg0 context.Context, arg1 ...func(*ecs.Options)) (*ecs.ListServicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NextPage", varargs...)
	ret0, _ := ret[0].(*ecs.ListServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextPage indicates an expected call of NextPage.
func (mr *MockListServicesPagerMockRecorder) NextPage(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPage", reflect.TypeOf((*MockListServicesPager)(nil).NextPage), varargs...)
}

// MockListTasksPaginator is a mock of ListTasksPaginator interface.
type MockListTasksPaginator struct {
	ctrl     *gomock.Controller
	recorder *MockListTasksPaginatorMockRecorder
}

// MockListTasksPaginatorMockRecorder is the mock recorder for MockListTasksPaginator.
type MockListTasksPaginatorMockRecorder struct {
	mock *MockListTasksPaginator
}

// NewMockListTasksPaginator creates a new mock instance.
func NewMockListTasksPaginator(ctrl *gomock.Controller) *MockListTasksPaginator {
	mock := &MockListTasksPaginator{ctrl: ctrl}
	mock.recorder = &MockListTasksPaginatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListTasksPaginator) EXPECT() *MockListTasksPaginatorMockRecorder {
	return m.recorder
}

// NewListTasksPaginator mocks base method.
func (m *MockListTasksPaginator) NewListTasksPaginator(params *ecs.ListTasksInput) awsapis.ListTasksPager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListTasksPaginator", params)
	ret0, _ := ret[0].(awsapis.ListTasksPager)
	return ret0
}

// NewListTasksPaginator indicates an expected call of NewListTasksPaginator.
func (mr *MockListTasksPaginatorMockRecorder) NewListTasksPaginator(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListTasksPaginator", reflect.TypeOf((*MockListTasksPaginator)(nil).NewListTasksPaginator), params)
}

// MockListTasksPager is a mock of ListTasksPager interface.
type MockListTasksPager struct {
	ctrl     *gomock.Controller
	recorder *MockListTasksPagerMockRecorder
}

// MockListTasksPagerMockRecorder is the mock recorder for MockListTasksPager.
type MockListTasksPagerMockRecorder struct {
	mock *MockListTasksPager
}

// NewMockListTasksPager creates a new mock instance.
func NewMockListTasksPager(ctrl *gomock.Controller) *MockListTasksPager {
	mock := &MockListTasksPager{ctrl: ctrl}
	mock.recorder = &MockListTasksPagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListTasksPager) EXPECT() *MockListTasksPagerMockRecorder {
	return m.recorder
}

// HasMorePages mocks base method.
func (m *MockListTasksPager) HasMorePages() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMorePages")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasMorePages indicates an expected call of HasMorePages.
func (mr *MockListTasksPagerMockRecorder) HasMorePages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMorePages", reflect.TypeOf((*MockListTasksPager)(nil).HasMorePages))
}

// NextPage mocks base method.
func (m *MockListTasksPager) NextPage(arg0 context.Context, arg1 ...func(*ecs.Options)) (*ecs.ListTasksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NextPage", varargs...)
	ret0, _ := ret[0].(*ecs.ListTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextPage indicates an expected call of NextPage.
func (mr *MockListTasksPagerMockRecorder) NextPage(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPage", reflect.TypeOf((*MockListTasksPager)(nil).NextPage), varargs...)
}
