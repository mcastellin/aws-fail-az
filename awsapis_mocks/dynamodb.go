// Code generated by MockGen. DO NOT EDIT.
// Source: awsapis/dynamodb.go

// Package awsapis_mocks is a generated GoMock package.
package awsapis_mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	awsapis "github.com/mcastellin/aws-fail-az/awsapis"
	gomock "go.uber.org/mock/gomock"
)

// MockDynamodbApi is a mock of DynamodbApi interface.
type MockDynamodbApi struct {
	ctrl     *gomock.Controller
	recorder *MockDynamodbApiMockRecorder
}

// MockDynamodbApiMockRecorder is the mock recorder for MockDynamodbApi.
type MockDynamodbApiMockRecorder struct {
	mock *MockDynamodbApi
}

// NewMockDynamodbApi creates a new mock instance.
func NewMockDynamodbApi(ctrl *gomock.Controller) *MockDynamodbApi {
	mock := &MockDynamodbApi{ctrl: ctrl}
	mock.recorder = &MockDynamodbApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamodbApi) EXPECT() *MockDynamodbApiMockRecorder {
	return m.recorder
}

// CreateTable mocks base method.
func (m *MockDynamodbApi) CreateTable(ctx context.Context, params *dynamodb.CreateTableInput, optFns ...func(*dynamodb.Options)) (*dynamodb.CreateTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTable", varargs...)
	ret0, _ := ret[0].(*dynamodb.CreateTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockDynamodbApiMockRecorder) CreateTable(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockDynamodbApi)(nil).CreateTable), varargs...)
}

// DeleteItem mocks base method.
func (m *MockDynamodbApi) DeleteItem(ctx context.Context, params *dynamodb.DeleteItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.DeleteItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.DeleteItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockDynamodbApiMockRecorder) DeleteItem(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockDynamodbApi)(nil).DeleteItem), varargs...)
}

// DescribeTable mocks base method.
func (m *MockDynamodbApi) DescribeTable(ctx context.Context, params *dynamodb.DescribeTableInput, optFns ...func(*dynamodb.Options)) (*dynamodb.DescribeTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTable", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTable indicates an expected call of DescribeTable.
func (mr *MockDynamodbApiMockRecorder) DescribeTable(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTable", reflect.TypeOf((*MockDynamodbApi)(nil).DescribeTable), varargs...)
}

// GetItem mocks base method.
func (m *MockDynamodbApi) GetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.GetItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockDynamodbApiMockRecorder) GetItem(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockDynamodbApi)(nil).GetItem), varargs...)
}

// NewQueryPaginator mocks base method.
func (m *MockDynamodbApi) NewQueryPaginator(params *dynamodb.QueryInput) awsapis.DynamodbQueryPager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewQueryPaginator", params)
	ret0, _ := ret[0].(awsapis.DynamodbQueryPager)
	return ret0
}

// NewQueryPaginator indicates an expected call of NewQueryPaginator.
func (mr *MockDynamodbApiMockRecorder) NewQueryPaginator(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewQueryPaginator", reflect.TypeOf((*MockDynamodbApi)(nil).NewQueryPaginator), params)
}

// NewTableExistsWaiter mocks base method.
func (m *MockDynamodbApi) NewTableExistsWaiter() awsapis.DynamodbTableExistsWaiter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTableExistsWaiter")
	ret0, _ := ret[0].(awsapis.DynamodbTableExistsWaiter)
	return ret0
}

// NewTableExistsWaiter indicates an expected call of NewTableExistsWaiter.
func (mr *MockDynamodbApiMockRecorder) NewTableExistsWaiter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTableExistsWaiter", reflect.TypeOf((*MockDynamodbApi)(nil).NewTableExistsWaiter))
}

// PutItem mocks base method.
func (m *MockDynamodbApi) PutItem(ctx context.Context, params *dynamodb.PutItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.PutItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.PutItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutItem indicates an expected call of PutItem.
func (mr *MockDynamodbApiMockRecorder) PutItem(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItem", reflect.TypeOf((*MockDynamodbApi)(nil).PutItem), varargs...)
}

// MockDynamodbItemGetter is a mock of DynamodbItemGetter interface.
type MockDynamodbItemGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDynamodbItemGetterMockRecorder
}

// MockDynamodbItemGetterMockRecorder is the mock recorder for MockDynamodbItemGetter.
type MockDynamodbItemGetterMockRecorder struct {
	mock *MockDynamodbItemGetter
}

// NewMockDynamodbItemGetter creates a new mock instance.
func NewMockDynamodbItemGetter(ctrl *gomock.Controller) *MockDynamodbItemGetter {
	mock := &MockDynamodbItemGetter{ctrl: ctrl}
	mock.recorder = &MockDynamodbItemGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamodbItemGetter) EXPECT() *MockDynamodbItemGetterMockRecorder {
	return m.recorder
}

// GetItem mocks base method.
func (m *MockDynamodbItemGetter) GetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.GetItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockDynamodbItemGetterMockRecorder) GetItem(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockDynamodbItemGetter)(nil).GetItem), varargs...)
}

// MockDynamodbItemPutter is a mock of DynamodbItemPutter interface.
type MockDynamodbItemPutter struct {
	ctrl     *gomock.Controller
	recorder *MockDynamodbItemPutterMockRecorder
}

// MockDynamodbItemPutterMockRecorder is the mock recorder for MockDynamodbItemPutter.
type MockDynamodbItemPutterMockRecorder struct {
	mock *MockDynamodbItemPutter
}

// NewMockDynamodbItemPutter creates a new mock instance.
func NewMockDynamodbItemPutter(ctrl *gomock.Controller) *MockDynamodbItemPutter {
	mock := &MockDynamodbItemPutter{ctrl: ctrl}
	mock.recorder = &MockDynamodbItemPutterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamodbItemPutter) EXPECT() *MockDynamodbItemPutterMockRecorder {
	return m.recorder
}

// PutItem mocks base method.
func (m *MockDynamodbItemPutter) PutItem(ctx context.Context, params *dynamodb.PutItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.PutItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.PutItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutItem indicates an expected call of PutItem.
func (mr *MockDynamodbItemPutterMockRecorder) PutItem(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItem", reflect.TypeOf((*MockDynamodbItemPutter)(nil).PutItem), varargs...)
}

// MockDynamodbItemDeleter is a mock of DynamodbItemDeleter interface.
type MockDynamodbItemDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockDynamodbItemDeleterMockRecorder
}

// MockDynamodbItemDeleterMockRecorder is the mock recorder for MockDynamodbItemDeleter.
type MockDynamodbItemDeleterMockRecorder struct {
	mock *MockDynamodbItemDeleter
}

// NewMockDynamodbItemDeleter creates a new mock instance.
func NewMockDynamodbItemDeleter(ctrl *gomock.Controller) *MockDynamodbItemDeleter {
	mock := &MockDynamodbItemDeleter{ctrl: ctrl}
	mock.recorder = &MockDynamodbItemDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamodbItemDeleter) EXPECT() *MockDynamodbItemDeleterMockRecorder {
	return m.recorder
}

// DeleteItem mocks base method.
func (m *MockDynamodbItemDeleter) DeleteItem(ctx context.Context, params *dynamodb.DeleteItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.DeleteItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.DeleteItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockDynamodbItemDeleterMockRecorder) DeleteItem(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockDynamodbItemDeleter)(nil).DeleteItem), varargs...)
}

// MockDynamodbTableDescriptor is a mock of DynamodbTableDescriptor interface.
type MockDynamodbTableDescriptor struct {
	ctrl     *gomock.Controller
	recorder *MockDynamodbTableDescriptorMockRecorder
}

// MockDynamodbTableDescriptorMockRecorder is the mock recorder for MockDynamodbTableDescriptor.
type MockDynamodbTableDescriptorMockRecorder struct {
	mock *MockDynamodbTableDescriptor
}

// NewMockDynamodbTableDescriptor creates a new mock instance.
func NewMockDynamodbTableDescriptor(ctrl *gomock.Controller) *MockDynamodbTableDescriptor {
	mock := &MockDynamodbTableDescriptor{ctrl: ctrl}
	mock.recorder = &MockDynamodbTableDescriptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamodbTableDescriptor) EXPECT() *MockDynamodbTableDescriptorMockRecorder {
	return m.recorder
}

// DescribeTable mocks base method.
func (m *MockDynamodbTableDescriptor) DescribeTable(ctx context.Context, params *dynamodb.DescribeTableInput, optFns ...func(*dynamodb.Options)) (*dynamodb.DescribeTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTable", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTable indicates an expected call of DescribeTable.
func (mr *MockDynamodbTableDescriptorMockRecorder) DescribeTable(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTable", reflect.TypeOf((*MockDynamodbTableDescriptor)(nil).DescribeTable), varargs...)
}

// MockDynamodbTableCreator is a mock of DynamodbTableCreator interface.
type MockDynamodbTableCreator struct {
	ctrl     *gomock.Controller
	recorder *MockDynamodbTableCreatorMockRecorder
}

// MockDynamodbTableCreatorMockRecorder is the mock recorder for MockDynamodbTableCreator.
type MockDynamodbTableCreatorMockRecorder struct {
	mock *MockDynamodbTableCreator
}

// NewMockDynamodbTableCreator creates a new mock instance.
func NewMockDynamodbTableCreator(ctrl *gomock.Controller) *MockDynamodbTableCreator {
	mock := &MockDynamodbTableCreator{ctrl: ctrl}
	mock.recorder = &MockDynamodbTableCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamodbTableCreator) EXPECT() *MockDynamodbTableCreatorMockRecorder {
	return m.recorder
}

// CreateTable mocks base method.
func (m *MockDynamodbTableCreator) CreateTable(ctx context.Context, params *dynamodb.CreateTableInput, optFns ...func(*dynamodb.Options)) (*dynamodb.CreateTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTable", varargs...)
	ret0, _ := ret[0].(*dynamodb.CreateTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockDynamodbTableCreatorMockRecorder) CreateTable(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockDynamodbTableCreator)(nil).CreateTable), varargs...)
}

// MockDynamodbQueryPaginator is a mock of DynamodbQueryPaginator interface.
type MockDynamodbQueryPaginator struct {
	ctrl     *gomock.Controller
	recorder *MockDynamodbQueryPaginatorMockRecorder
}

// MockDynamodbQueryPaginatorMockRecorder is the mock recorder for MockDynamodbQueryPaginator.
type MockDynamodbQueryPaginatorMockRecorder struct {
	mock *MockDynamodbQueryPaginator
}

// NewMockDynamodbQueryPaginator creates a new mock instance.
func NewMockDynamodbQueryPaginator(ctrl *gomock.Controller) *MockDynamodbQueryPaginator {
	mock := &MockDynamodbQueryPaginator{ctrl: ctrl}
	mock.recorder = &MockDynamodbQueryPaginatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamodbQueryPaginator) EXPECT() *MockDynamodbQueryPaginatorMockRecorder {
	return m.recorder
}

// NewQueryPaginator mocks base method.
func (m *MockDynamodbQueryPaginator) NewQueryPaginator(params *dynamodb.QueryInput) awsapis.DynamodbQueryPager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewQueryPaginator", params)
	ret0, _ := ret[0].(awsapis.DynamodbQueryPager)
	return ret0
}

// NewQueryPaginator indicates an expected call of NewQueryPaginator.
func (mr *MockDynamodbQueryPaginatorMockRecorder) NewQueryPaginator(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewQueryPaginator", reflect.TypeOf((*MockDynamodbQueryPaginator)(nil).NewQueryPaginator), params)
}

// MockDynamodbQueryPager is a mock of DynamodbQueryPager interface.
type MockDynamodbQueryPager struct {
	ctrl     *gomock.Controller
	recorder *MockDynamodbQueryPagerMockRecorder
}

// MockDynamodbQueryPagerMockRecorder is the mock recorder for MockDynamodbQueryPager.
type MockDynamodbQueryPagerMockRecorder struct {
	mock *MockDynamodbQueryPager
}

// NewMockDynamodbQueryPager creates a new mock instance.
func NewMockDynamodbQueryPager(ctrl *gomock.Controller) *MockDynamodbQueryPager {
	mock := &MockDynamodbQueryPager{ctrl: ctrl}
	mock.recorder = &MockDynamodbQueryPagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamodbQueryPager) EXPECT() *MockDynamodbQueryPagerMockRecorder {
	return m.recorder
}

// HasMorePages mocks base method.
func (m *MockDynamodbQueryPager) HasMorePages() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMorePages")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasMorePages indicates an expected call of HasMorePages.
func (mr *MockDynamodbQueryPagerMockRecorder) HasMorePages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMorePages", reflect.TypeOf((*MockDynamodbQueryPager)(nil).HasMorePages))
}

// NextPage mocks base method.
func (m *MockDynamodbQueryPager) NextPage(arg0 context.Context, arg1 ...func(*dynamodb.Options)) (*dynamodb.QueryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NextPage", varargs...)
	ret0, _ := ret[0].(*dynamodb.QueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextPage indicates an expected call of NextPage.
func (mr *MockDynamodbQueryPagerMockRecorder) NextPage(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPage", reflect.TypeOf((*MockDynamodbQueryPager)(nil).NextPage), varargs...)
}

// MockDynamodbTableExistsWaiterIface is a mock of DynamodbTableExistsWaiterIface interface.
type MockDynamodbTableExistsWaiterIface struct {
	ctrl     *gomock.Controller
	recorder *MockDynamodbTableExistsWaiterIfaceMockRecorder
}

// MockDynamodbTableExistsWaiterIfaceMockRecorder is the mock recorder for MockDynamodbTableExistsWaiterIface.
type MockDynamodbTableExistsWaiterIfaceMockRecorder struct {
	mock *MockDynamodbTableExistsWaiterIface
}

// NewMockDynamodbTableExistsWaiterIface creates a new mock instance.
func NewMockDynamodbTableExistsWaiterIface(ctrl *gomock.Controller) *MockDynamodbTableExistsWaiterIface {
	mock := &MockDynamodbTableExistsWaiterIface{ctrl: ctrl}
	mock.recorder = &MockDynamodbTableExistsWaiterIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamodbTableExistsWaiterIface) EXPECT() *MockDynamodbTableExistsWaiterIfaceMockRecorder {
	return m.recorder
}

// NewTableExistsWaiter mocks base method.
func (m *MockDynamodbTableExistsWaiterIface) NewTableExistsWaiter() awsapis.DynamodbTableExistsWaiter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTableExistsWaiter")
	ret0, _ := ret[0].(awsapis.DynamodbTableExistsWaiter)
	return ret0
}

// NewTableExistsWaiter indicates an expected call of NewTableExistsWaiter.
func (mr *MockDynamodbTableExistsWaiterIfaceMockRecorder) NewTableExistsWaiter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTableExistsWaiter", reflect.TypeOf((*MockDynamodbTableExistsWaiterIface)(nil).NewTableExistsWaiter))
}

// MockDynamodbTableExistsWaiter is a mock of DynamodbTableExistsWaiter interface.
type MockDynamodbTableExistsWaiter struct {
	ctrl     *gomock.Controller
	recorder *MockDynamodbTableExistsWaiterMockRecorder
}

// MockDynamodbTableExistsWaiterMockRecorder is the mock recorder for MockDynamodbTableExistsWaiter.
type MockDynamodbTableExistsWaiterMockRecorder struct {
	mock *MockDynamodbTableExistsWaiter
}

// NewMockDynamodbTableExistsWaiter creates a new mock instance.
func NewMockDynamodbTableExistsWaiter(ctrl *gomock.Controller) *MockDynamodbTableExistsWaiter {
	mock := &MockDynamodbTableExistsWaiter{ctrl: ctrl}
	mock.recorder = &MockDynamodbTableExistsWaiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamodbTableExistsWaiter) EXPECT() *MockDynamodbTableExistsWaiterMockRecorder {
	return m.recorder
}

// Wait mocks base method.
func (m *MockDynamodbTableExistsWaiter) Wait(ctx context.Context, params *dynamodb.DescribeTableInput, maxWaitDur time.Duration, optFns ...func(*dynamodb.TableExistsWaiterOptions)) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, maxWaitDur}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Wait", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockDynamodbTableExistsWaiterMockRecorder) Wait(ctx, params, maxWaitDur interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, maxWaitDur}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockDynamodbTableExistsWaiter)(nil).Wait), varargs...)
}
