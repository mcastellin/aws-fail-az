// Code generated by MockGen. DO NOT EDIT.
// Source: awsapis/elbv2.go

// Package awsapis_mocks is a generated GoMock package.
package awsapis_mocks

import (
	context "context"
	reflect "reflect"

	elasticloadbalancingv2 "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awsapis "github.com/mcastellin/aws-fail-az/awsapis"
	gomock "go.uber.org/mock/gomock"
)

// MockElbV2Api is a mock of ElbV2Api interface.
type MockElbV2Api struct {
	ctrl     *gomock.Controller
	recorder *MockElbV2ApiMockRecorder
}

// MockElbV2ApiMockRecorder is the mock recorder for MockElbV2Api.
type MockElbV2ApiMockRecorder struct {
	mock *MockElbV2Api
}

// NewMockElbV2Api creates a new mock instance.
func NewMockElbV2Api(ctrl *gomock.Controller) *MockElbV2Api {
	mock := &MockElbV2Api{ctrl: ctrl}
	mock.recorder = &MockElbV2ApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockElbV2Api) EXPECT() *MockElbV2ApiMockRecorder {
	return m.recorder
}

// DescribeLoadBalancers mocks base method.
func (m *MockElbV2Api) DescribeLoadBalancers(arg0 context.Context, arg1 *elasticloadbalancingv2.DescribeLoadBalancersInput, arg2 ...func(*elasticloadbalancingv2.Options)) (*elasticloadbalancingv2.DescribeLoadBalancersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLoadBalancers", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancingv2.DescribeLoadBalancersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoadBalancers indicates an expected call of DescribeLoadBalancers.
func (mr *MockElbV2ApiMockRecorder) DescribeLoadBalancers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoadBalancers", reflect.TypeOf((*MockElbV2Api)(nil).DescribeLoadBalancers), varargs...)
}

// DescribeTags mocks base method.
func (m *MockElbV2Api) DescribeTags(arg0 context.Context, arg1 *elasticloadbalancingv2.DescribeTagsInput, arg2 ...func(*elasticloadbalancingv2.Options)) (*elasticloadbalancingv2.DescribeTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTags", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancingv2.DescribeTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTags indicates an expected call of DescribeTags.
func (mr *MockElbV2ApiMockRecorder) DescribeTags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTags", reflect.TypeOf((*MockElbV2Api)(nil).DescribeTags), varargs...)
}

// NewDescribeLoadBalancersPaginator mocks base method.
func (m *MockElbV2Api) NewDescribeLoadBalancersPaginator(params *elasticloadbalancingv2.DescribeLoadBalancersInput, optFn ...func(*elasticloadbalancingv2.Options)) awsapis.DescribeLoadBalancersPager {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range optFn {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewDescribeLoadBalancersPaginator", varargs...)
	ret0, _ := ret[0].(awsapis.DescribeLoadBalancersPager)
	return ret0
}

// NewDescribeLoadBalancersPaginator indicates an expected call of NewDescribeLoadBalancersPaginator.
func (mr *MockElbV2ApiMockRecorder) NewDescribeLoadBalancersPaginator(params interface{}, optFn ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, optFn...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDescribeLoadBalancersPaginator", reflect.TypeOf((*MockElbV2Api)(nil).NewDescribeLoadBalancersPaginator), varargs...)
}

// SetSubnets mocks base method.
func (m *MockElbV2Api) SetSubnets(arg0 context.Context, arg1 *elasticloadbalancingv2.SetSubnetsInput, arg2 ...func(*elasticloadbalancingv2.Options)) (*elasticloadbalancingv2.SetSubnetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSubnets", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancingv2.SetSubnetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSubnets indicates an expected call of SetSubnets.
func (mr *MockElbV2ApiMockRecorder) SetSubnets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubnets", reflect.TypeOf((*MockElbV2Api)(nil).SetSubnets), varargs...)
}

// MockElbV2TagDescriptor is a mock of ElbV2TagDescriptor interface.
type MockElbV2TagDescriptor struct {
	ctrl     *gomock.Controller
	recorder *MockElbV2TagDescriptorMockRecorder
}

// MockElbV2TagDescriptorMockRecorder is the mock recorder for MockElbV2TagDescriptor.
type MockElbV2TagDescriptorMockRecorder struct {
	mock *MockElbV2TagDescriptor
}

// NewMockElbV2TagDescriptor creates a new mock instance.
func NewMockElbV2TagDescriptor(ctrl *gomock.Controller) *MockElbV2TagDescriptor {
	mock := &MockElbV2TagDescriptor{ctrl: ctrl}
	mock.recorder = &MockElbV2TagDescriptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockElbV2TagDescriptor) EXPECT() *MockElbV2TagDescriptorMockRecorder {
	return m.recorder
}

// DescribeTags mocks base method.
func (m *MockElbV2TagDescriptor) DescribeTags(arg0 context.Context, arg1 *elasticloadbalancingv2.DescribeTagsInput, arg2 ...func(*elasticloadbalancingv2.Options)) (*elasticloadbalancingv2.DescribeTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTags", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancingv2.DescribeTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTags indicates an expected call of DescribeTags.
func (mr *MockElbV2TagDescriptorMockRecorder) DescribeTags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTags", reflect.TypeOf((*MockElbV2TagDescriptor)(nil).DescribeTags), varargs...)
}

// MockElbV2LoadBalancersDescriptor is a mock of ElbV2LoadBalancersDescriptor interface.
type MockElbV2LoadBalancersDescriptor struct {
	ctrl     *gomock.Controller
	recorder *MockElbV2LoadBalancersDescriptorMockRecorder
}

// MockElbV2LoadBalancersDescriptorMockRecorder is the mock recorder for MockElbV2LoadBalancersDescriptor.
type MockElbV2LoadBalancersDescriptorMockRecorder struct {
	mock *MockElbV2LoadBalancersDescriptor
}

// NewMockElbV2LoadBalancersDescriptor creates a new mock instance.
func NewMockElbV2LoadBalancersDescriptor(ctrl *gomock.Controller) *MockElbV2LoadBalancersDescriptor {
	mock := &MockElbV2LoadBalancersDescriptor{ctrl: ctrl}
	mock.recorder = &MockElbV2LoadBalancersDescriptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockElbV2LoadBalancersDescriptor) EXPECT() *MockElbV2LoadBalancersDescriptorMockRecorder {
	return m.recorder
}

// DescribeLoadBalancers mocks base method.
func (m *MockElbV2LoadBalancersDescriptor) DescribeLoadBalancers(arg0 context.Context, arg1 *elasticloadbalancingv2.DescribeLoadBalancersInput, arg2 ...func(*elasticloadbalancingv2.Options)) (*elasticloadbalancingv2.DescribeLoadBalancersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLoadBalancers", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancingv2.DescribeLoadBalancersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoadBalancers indicates an expected call of DescribeLoadBalancers.
func (mr *MockElbV2LoadBalancersDescriptorMockRecorder) DescribeLoadBalancers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoadBalancers", reflect.TypeOf((*MockElbV2LoadBalancersDescriptor)(nil).DescribeLoadBalancers), varargs...)
}

// MockElbV2SubnetSetter is a mock of ElbV2SubnetSetter interface.
type MockElbV2SubnetSetter struct {
	ctrl     *gomock.Controller
	recorder *MockElbV2SubnetSetterMockRecorder
}

// MockElbV2SubnetSetterMockRecorder is the mock recorder for MockElbV2SubnetSetter.
type MockElbV2SubnetSetterMockRecorder struct {
	mock *MockElbV2SubnetSetter
}

// NewMockElbV2SubnetSetter creates a new mock instance.
func NewMockElbV2SubnetSetter(ctrl *gomock.Controller) *MockElbV2SubnetSetter {
	mock := &MockElbV2SubnetSetter{ctrl: ctrl}
	mock.recorder = &MockElbV2SubnetSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockElbV2SubnetSetter) EXPECT() *MockElbV2SubnetSetterMockRecorder {
	return m.recorder
}

// SetSubnets mocks base method.
func (m *MockElbV2SubnetSetter) SetSubnets(arg0 context.Context, arg1 *elasticloadbalancingv2.SetSubnetsInput, arg2 ...func(*elasticloadbalancingv2.Options)) (*elasticloadbalancingv2.SetSubnetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSubnets", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancingv2.SetSubnetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSubnets indicates an expected call of SetSubnets.
func (mr *MockElbV2SubnetSetterMockRecorder) SetSubnets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubnets", reflect.TypeOf((*MockElbV2SubnetSetter)(nil).SetSubnets), varargs...)
}

// MockDescribeLoadBalancersPaginator is a mock of DescribeLoadBalancersPaginator interface.
type MockDescribeLoadBalancersPaginator struct {
	ctrl     *gomock.Controller
	recorder *MockDescribeLoadBalancersPaginatorMockRecorder
}

// MockDescribeLoadBalancersPaginatorMockRecorder is the mock recorder for MockDescribeLoadBalancersPaginator.
type MockDescribeLoadBalancersPaginatorMockRecorder struct {
	mock *MockDescribeLoadBalancersPaginator
}

// NewMockDescribeLoadBalancersPaginator creates a new mock instance.
func NewMockDescribeLoadBalancersPaginator(ctrl *gomock.Controller) *MockDescribeLoadBalancersPaginator {
	mock := &MockDescribeLoadBalancersPaginator{ctrl: ctrl}
	mock.recorder = &MockDescribeLoadBalancersPaginatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescribeLoadBalancersPaginator) EXPECT() *MockDescribeLoadBalancersPaginatorMockRecorder {
	return m.recorder
}

// NewDescribeLoadBalancersPaginator mocks base method.
func (m *MockDescribeLoadBalancersPaginator) NewDescribeLoadBalancersPaginator(params *elasticloadbalancingv2.DescribeLoadBalancersInput, optFn ...func(*elasticloadbalancingv2.Options)) awsapis.DescribeLoadBalancersPager {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range optFn {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewDescribeLoadBalancersPaginator", varargs...)
	ret0, _ := ret[0].(awsapis.DescribeLoadBalancersPager)
	return ret0
}

// NewDescribeLoadBalancersPaginator indicates an expected call of NewDescribeLoadBalancersPaginator.
func (mr *MockDescribeLoadBalancersPaginatorMockRecorder) NewDescribeLoadBalancersPaginator(params interface{}, optFn ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, optFn...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDescribeLoadBalancersPaginator", reflect.TypeOf((*MockDescribeLoadBalancersPaginator)(nil).NewDescribeLoadBalancersPaginator), varargs...)
}

// MockDescribeLoadBalancersPager is a mock of DescribeLoadBalancersPager interface.
type MockDescribeLoadBalancersPager struct {
	ctrl     *gomock.Controller
	recorder *MockDescribeLoadBalancersPagerMockRecorder
}

// MockDescribeLoadBalancersPagerMockRecorder is the mock recorder for MockDescribeLoadBalancersPager.
type MockDescribeLoadBalancersPagerMockRecorder struct {
	mock *MockDescribeLoadBalancersPager
}

// NewMockDescribeLoadBalancersPager creates a new mock instance.
func NewMockDescribeLoadBalancersPager(ctrl *gomock.Controller) *MockDescribeLoadBalancersPager {
	mock := &MockDescribeLoadBalancersPager{ctrl: ctrl}
	mock.recorder = &MockDescribeLoadBalancersPagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescribeLoadBalancersPager) EXPECT() *MockDescribeLoadBalancersPagerMockRecorder {
	return m.recorder
}

// HasMorePages mocks base method.
func (m *MockDescribeLoadBalancersPager) HasMorePages() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMorePages")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasMorePages indicates an expected call of HasMorePages.
func (mr *MockDescribeLoadBalancersPagerMockRecorder) HasMorePages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMorePages", reflect.TypeOf((*MockDescribeLoadBalancersPager)(nil).HasMorePages))
}

// NextPage mocks base method.
func (m *MockDescribeLoadBalancersPager) NextPage(arg0 context.Context, arg1 ...func(*elasticloadbalancingv2.Options)) (*elasticloadbalancingv2.DescribeLoadBalancersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NextPage", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancingv2.DescribeLoadBalancersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextPage indicates an expected call of NextPage.
func (mr *MockDescribeLoadBalancersPagerMockRecorder) NextPage(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPage", reflect.TypeOf((*MockDescribeLoadBalancersPager)(nil).NextPage), varargs...)
}
